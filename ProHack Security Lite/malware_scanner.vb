Imports System.Data.OleDb
Imports System.IO

Public Class malware_scanner

    Public isScanning As Boolean = False
    Public malwareDetected As Boolean = False
    Public scanType As String

    Sub New()
        InitializeComponent()
        Me.DoubleBuffered = True
    End Sub

    Private Sub btnExit_MouseEnter(sender As Object, e As EventArgs) Handles btnExit.MouseEnter
        Try
            btnExit.BackgroundImage = Image.FromFile(Application.StartupPath & "/res/common_controls/shutdown_hover.png")
        Catch ex As Exception
            MsgBox(ex.ToString)
        End Try
    End Sub

    Private Sub btnExit_MouseLeave(sender As Object, e As EventArgs) Handles btnExit.MouseLeave
        Try
            btnExit.BackgroundImage = Image.FromFile(Application.StartupPath & "/res/common_controls/shutdown.png")
        Catch ex As Exception
            utils.invoke_msg(2, "Icon Error", ex.Message.ToString)
        End Try
    End Sub

    Private Sub btnExit_Click(sender As Object, e As EventArgs) Handles btnExit.Click
        close_me(True)
    End Sub

    Private Sub btnToggleScan_MouseEnter(sender As Object, e As EventArgs) Handles btnToggleScan.MouseEnter
        If isScanning = False Then
            btnToggleScan.Image = Image.FromFile(Application.StartupPath & "/res/malware_scanner/rocket_hover.png")
        End If
    End Sub

    Private Sub btnToggleScan_MouseLeave(sender As Object, e As EventArgs) Handles btnToggleScan.MouseLeave
        If isScanning = False Then
            btnToggleScan.Image = Image.FromFile(Application.StartupPath & "/res/malware_scanner/rocket.png")
        End If
    End Sub

    Private Sub btnToggleScan_Click(sender As Object, e As EventArgs) Handles btnToggleScan.Click
        If isScanning = True Then
            ' if scanning, then don't support cancellation.
            Dim tempStr As String = "Unadvisable to stop background threads in-between work. Please close malware scanner window if you really wish to end the scan.."
            utils.invoke_msg(3, "Scanning!", tempStr)
        ElseIf isScanning = False Then
            ' if not scanning, start scanning
            txtStatus.Text = "Status: Scanning..."
            btnToggleScan.Image = Image.FromFile(Application.StartupPath & "/res/malware_scanner/loading_dark.gif")
            If Not bgWorker_Scanner.IsBusy Then
                Try
                    bgWorker_Scanner.RunWorkerAsync()
                    isScanning = True
                Catch ex As Exception
                    utils.invoke_msg(3, "Worker Error", ex.Message.ToString)
                End Try
            End If

            txtCalmDown.Text = "Feel free to do other work!"
        End If

    End Sub

    Private Sub malware_scanner_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        scanType = mainWindow.scanType
        lblSubTitle.Text = scanType & " Scan"
        progressBar1.Style = ProgressBarStyle.Continuous
        isScanning = False
    End Sub

    Private Sub bgWorker_Scanner_DoWork(sender As Object, e As System.ComponentModel.DoWorkEventArgs) Handles bgWorker_Scanner.DoWork
        ' reusable declares
        Dim reader As StreamReader                  ' common file reader
        Dim writer As StreamWriter                  ' common file writer
        Dim tempString As String = Nothing          ' temporary string storage
        Dim counter As Integer = 0                  ' loop counter
        Dim FilesAndHashes As New List(Of String)() ' save filepaths and hashes

        ' file operating declares
        Dim file_bytes() As Byte                     ' store file bytes in byte array
        Dim file_bytes_size As Integer               ' size of file_bytes array
        Dim lineBytes() As Byte                      ' store line bytes in byte array
        Dim lineBytes_size As Integer                ' size of lineBytes array
        Dim totalRead_size As Integer                ' size of total line bytes
        Dim temp_file_paths As New List(Of String)() ' store filepaths temporarily

        ' common declares : comparer
        Dim malware_hash_counter As Integer = 0    ' store count of something
        Dim len_hash_files As Integer = 0          ' store length of hash files


        ' other declares : comparer
        Dim hashfile_lineArray() As String              ' string array to store 2 signature from each line in malware db file
        Dim malware_hash_store As New List(Of String)() ' store malware hashes in list

        ' -- operations according to scan types -- '

        ' quick scan
        If scanType = "Quick" Then
            ' read the WSIR file
            reader = My.Computer.FileSystem.OpenTextFileReader(utils.WSIR_file)
            ' get file bytes
            file_bytes = File.ReadAllBytes(utils.WSIR_file)
            ' get size of file bytes in integer
            file_bytes_size = file_bytes.Length
            Do
                ' store each filepath in tempString variable
                tempString = reader.ReadLine
                ' if tempString is not null or empty
                If Not String.IsNullOrEmpty(tempString) Then
                    ' get line bytes
                    lineBytes = System.Text.Encoding.ASCII.GetBytes(tempString)
                    ' get line bytes size in integer
                    lineBytes_size = lineBytes.Length
                    ' add line bytes size to total size read
                    totalRead_size += lineBytes_size
                    Try
                        ' add the filepath to list
                        ' this is faster than generating md5 on the go :-)
                        ' first we will store all the absolute filepaths in the memory, then find file signature
                        temp_file_paths.Add(tempString)
                    Catch ex As Exception : End Try ' idk what to do if exception. can do many things, but leaving it..
                End If
                bgWorker_Scanner.ReportProgress(CInt(totalRead_size * 100 / file_bytes_size))
            Loop Until tempString Is Nothing
            'close reader
            reader.Close()
            'report progress 0
            bgWorker_Scanner.ReportProgress(0)

            ' declares for hashing
            Dim filenumbers As Integer = temp_file_paths.Count  ' get number of files in file path array
            ' set counter to 0
            counter = 0

            ' for each file in file_paths
            For Each filepath In temp_file_paths
                ' try to
                Try
                    ' generate MD5 signature for the file 
                    ' and store it in tempString
                    tempString = utils._MD5_(filepath)
                    ' concatenate file path with md5 hash
                    tempString = filepath & " |+| " & tempString
                    ' add to file and hashes list
                    FilesAndHashes.Add(tempString)
                Catch ex As Exception : End Try ' idk
                counter += 1 ' increment the counter
                ' report progress
                bgWorker_Scanner.ReportProgress(counter * 100 / filenumbers)
            Next
            ' report progress as 100
            bgWorker_Scanner.ReportProgress(100)
        ElseIf scanType = "Deep" Then
            Dim command = utils.pyModDir & "DeepScan_FileGather.py"
            Using proc As New Process()
                proc.StartInfo.FileName = utils.python_path
                proc.StartInfo.Arguments = """" & command & """"
                proc.Start()
                proc.WaitForExit()
            End Using

            Dim filelist As String = Application.StartupPath & "/python_modules/data/Full_File.list"
            ' read the WSIR file
            reader = My.Computer.FileSystem.OpenTextFileReader(filelist)
            ' get file bytes
            file_bytes = File.ReadAllBytes(filelist)
            ' get size of file bytes in integer
            file_bytes_size = file_bytes.Length
            Do
                ' store each filepath in tempString variable
                tempString = reader.ReadLine
                ' if tempString is not null or empty
                If Not String.IsNullOrEmpty(tempString) Then
                    ' get line bytes
                    lineBytes = System.Text.Encoding.ASCII.GetBytes(tempString)
                    ' get line bytes size in integer
                    lineBytes_size = lineBytes.Length
                    ' add line bytes size to total size read
                    totalRead_size += lineBytes_size
                    Try
                        ' add the filepath to list
                        ' this is faster than generating md5 on the go :-)
                        ' first we will store all the absolute filepaths in the memory, then find file signature
                        temp_file_paths.Add(tempString)
                    Catch ex As Exception : End Try ' idk what to do if exception. can do many things, but leaving it..
                End If
                bgWorker_Scanner.ReportProgress(CInt(totalRead_size * 100 / file_bytes_size))
            Loop Until tempString Is Nothing
            'close reader
            reader.Close()
            'report progress 0
            bgWorker_Scanner.ReportProgress(0)

            ' declares for hashing
            Dim filenumbers As Integer = temp_file_paths.Count  ' get number of files in file path array
            ' set counter to 0
            counter = 0

            ' for each file in file_paths
            For Each filepath In temp_file_paths
                ' try to
                Try
                    ' generate MD5 signature for the file 
                    ' and store it in tempString
                    tempString = utils._MD5_(filepath)
                    ' concatenate file path with md5 hash
                    tempString = filepath & " |+| " & tempString
                    ' add to file and hashes list
                    FilesAndHashes.Add(tempString)
                Catch ex As Exception : End Try ' idk
                counter += 1 ' increment the counter
                ' report progress
                bgWorker_Scanner.ReportProgress(counter * 100 / filenumbers)
            Next
            ' report progress as 100
            bgWorker_Scanner.ReportProgress(100)
        ElseIf scanType = "Custom" Then
            ' make new form for: custom malware scanner
        End If

        ' -- comparison -- '

        ' for each system file hash, compare with malware hash
        ' get all malware hash files from the malware db folder
        Dim malware_hash_files() As String = IO.Directory.GetFiles(Application.StartupPath & "/data/malware_hashes/")
        ' get length of malware hash file array (get the number of files)
        len_hash_files = malware_hash_files.Count
        ' for each malware hash db file, read the file
        ' and compare each hash in the malware db file with each hash from file hash list
        For Each malware_hash_file In malware_hash_files
            ' read the malware hash db file
            reader = New StreamReader(malware_hash_file)
            ' loop over each line
            ' one line comsists of two signatures - packed & unpacked file signatures
            Do
                ' read the line into the temp variable
                tempString = reader.ReadLine
                ' perform check for value not being null or empty
                ' because in some cases, the variable stores null values and invokes many problems
                If Not String.IsNullOrEmpty(tempString) Then
                    ' seperate the packaed and unpacked hash
                    ' and add both to hashfile_lineArray
                    hashfile_lineArray = Split(tempString, ",")
                    ' add both parts in lineArray to malware hash list
                    For Each hashPart In hashfile_lineArray
                        malware_hash_store.Add(hashPart)
                    Next
                End If
                ' update malware_scanrner progressbar
                bgWorker_Scanner.ReportProgress(malware_hash_counter * 100 / len_hash_files)
            Loop Until tempString Is Nothing ' loop until the variable is nothing (till the end)
            ' cleaning operations
            reader.Close()   ' close file reader
            tempString = Nothing ' clean the temporary string variable

            ' declares for storing matched hashes and files
            Dim matched_hashes As New List(Of String)()
            Dim matched_files As New List(Of String)()

            ' get length of FilesAndHashes
            len_hash_files = FilesAndHashes.Count
            ' set counter to 0
            counter = 0
            ' for each file hash in list of file hashes
            For Each FileAndHash In FilesAndHashes
                hashfile_lineArray = Split(FileAndHash, " |+| ")
                ' for each malware hash in previous stored malware hash list
                ' compare Hash value from FileAndHash
                For Each malware_hash In malware_hash_store
                    ' if comparison is true, then detected
                    If hashfile_lineArray(1) = malware_hash Then
                        ' add file name to matched list
                        matched_files.Add(hashfile_lineArray(0))
                        ' add hash to matched list
                        matched_hashes.Add(hashfile_lineArray(1))
                        ' mark the status as malware detected in malware_scanner
                        malwareDetected = True
                    End If
                Next
                ' increment the counter for progress status
                counter += 1
                ' show progress in malware_scanner
                bgWorker_Scanner.ReportProgress(counter * 100 / len_hash_files)
            Next

            ' save matches to file ( not adding if statement for malwareDetected because I don't want to \[-_-]/ )
            writer = New StreamWriter(utils.dectected_malware_file)
            ' get length of matched hashes list
            Dim len_detections As Integer = matched_hashes.Count
            ' increment over matched hashes using the length
            For x As Integer = 0 To (len_detections - 1)
                ' concatenate filepath and hash to save into one line
                tempString = matched_files(x) & " |+| " & matched_hashes(x)
                ' write line in the file with tempString
                writer.WriteLine(tempString)
            Next
            ' close writer
            writer.Close()
            malware_hash_counter += 1
        Next

        ' collect garbage
        GC.Collect()
    End Sub

    Private Sub bgWorker_Scanner_ProgressChanged(sender As Object, e As System.ComponentModel.ProgressChangedEventArgs) Handles bgWorker_Scanner.ProgressChanged
        Try
            progressBar1.Value = e.ProgressPercentage
        Catch ex As Exception
            utils.invoke_msg(3, "Worker Error", ex.Message.ToString)
        End Try
        txtStatus.Text = e.ProgressPercentage.ToString() + "% Done"
    End Sub

    Private Sub bgWorker_Scanner_RunWorkerCompleted(sender As Object, e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bgWorker_Scanner.RunWorkerCompleted
        isScanning = False
        progressBar1.Value = 100
        txtCalmDown.Text = ""
        btnToggleScan.Image = Image.FromFile(Application.StartupPath & "/res/malware_scanner/rocket.png")
        If e.Error IsNot Nothing Then
            ' if error
            utils.invoke_msg(2, "Worker Error", e.Error.ToString)
        Else
            ' if normal completed, show detections window
            If malwareDetected = True Then
                malware_informer.Show()
                close_me(False)
            Else
                utils.invoke_msg(1, "You're Safe!", "You seem to be safe :)")
            End If
        End If
        GC.Collect()
    End Sub

    Private Sub malware_scanner_MouseDown(sender As Object, e As MouseEventArgs) Handles MyBase.MouseDown
        utils.Form_MouseDown(Me, e)
    End Sub

    Private Sub malware_scanner_MouseMove(sender As Object, e As MouseEventArgs) Handles MyBase.MouseMove
        utils.Form_MouseMove(Me, e)
    End Sub

    Private Sub malware_scanner_MouseUp(sender As Object, e As MouseEventArgs) Handles MyBase.MouseUp
        utils.Form_MouseUp(Me, e)
    End Sub

    Private Sub btnMinimize_MouseEnter(sender As Object, e As EventArgs) Handles btnMinimize.MouseEnter
        Try
            btnMinimize.BackgroundImage = Image.FromFile(Application.StartupPath & "/res/common_controls/minimize_hover.png")
        Catch ex As Exception
            utils.invoke_msg(2, "Icon Error", ex.Message.ToString)
        End Try
    End Sub

    Private Sub btnMinimize_MouseLeave(sender As Object, e As EventArgs) Handles btnMinimize.MouseLeave
        Try
            btnMinimize.BackgroundImage = Image.FromFile(Application.StartupPath & "/res/common_controls/minimize.png")
        Catch ex As Exception
            utils.invoke_msg(2, "Icon Error", ex.Message.ToString)
        End Try
    End Sub

    Private Sub close_me(showMain As Boolean)
        If mainWindow.fadeEffect_Status = "on" Then
            utils.form_fadeOut(Me)
        End If
        If showMain = True Then
            mainWindow.Show()
        End If
        GC.Collect()
        Me.Close()
    End Sub

    Private Sub btnMinimize_Click(sender As Object, e As EventArgs) Handles btnMinimize.Click
        If mainWindow.fadeEffect_Status = "on" Then
            utils.form_fadeOut(Me)
            check_focused.Start()
        End If
        Me.WindowState = FormWindowState.Minimized
    End Sub

    Private Sub check_focused_Tick(sender As Object, e As EventArgs) Handles check_focused.Tick
        If Me.WindowState = FormWindowState.Normal Then
            utils.form_fadeIn(Me)
            Me.Opacity = 1
            check_focused.Stop()
        End If
    End Sub

End Class