Imports System.Data.OleDb
Imports System.IO

Public Class malware_scanner

    Private isScanning As Boolean
    Private scanType As String
    Private malwareDetected As Boolean

    Sub New()
        InitializeComponent()
        Me.DoubleBuffered = True
    End Sub

    Private Sub btnExit_MouseEnter(sender As Object, e As EventArgs) Handles btnExit.MouseEnter
        Try
            btnExit.BackgroundImage = Image.FromFile(Application.StartupPath & "/res/common_controls/shutdown_hover.png")
        Catch ex As Exception
            MsgBox(ex.ToString)
        End Try
    End Sub

    Private Sub btnExit_MouseLeave(sender As Object, e As EventArgs) Handles btnExit.MouseLeave
        Try
            btnExit.BackgroundImage = Image.FromFile(Application.StartupPath & "/res/common_controls/shutdown.png")
        Catch ex As Exception
            utils.invoke_msg(2, "Icon Error", ex.Message.ToString)
        End Try
    End Sub

    Private Sub btnExit_Click(sender As Object, e As EventArgs) Handles btnExit.Click
        Me.Close()
        mainWindow.Show()
    End Sub

    Private Sub btnToggleScan_MouseEnter(sender As Object, e As EventArgs) Handles btnToggleScan.MouseEnter
        If isScanning = False Then
            btnToggleScan.Image = Image.FromFile(Application.StartupPath & "/res/malware_scanner/rocket_hover.png")
        End If
    End Sub

    Private Sub btnToggleScan_MouseLeave(sender As Object, e As EventArgs) Handles btnToggleScan.MouseLeave
        If isScanning = False Then
            btnToggleScan.Image = Image.FromFile(Application.StartupPath & "/res/malware_scanner/rocket.png")
        End If
    End Sub

    Private Sub btnToggleScan_Click(sender As Object, e As EventArgs) Handles btnToggleScan.Click
        If isScanning = True Then
            ' if scanning, stop scanning
            txtStatus.Text = "Status: Idle..."
            btnToggleScan.Image = Image.FromFile(Application.StartupPath & "/res/malware_scanner/rocket.png")
            If bgWorker_Scanner.IsBusy Then
                Try
                    bgWorker_Scanner.CancelAsync()
                Catch ex As Exception
                    utils.invoke_msg(3, "Worker Error", ex.Message.ToString)
                End Try
            End If
            isScanning = False
        Else
            ' if not scanning, start scanning
            txtStatus.Text = "Status: Scanning..."
            btnToggleScan.Image = Image.FromFile(Application.StartupPath & "/res/malware_scanner/loading_dark.gif")
            If Not bgWorker_Scanner.IsBusy Then
                Try
                    bgWorker_Scanner.RunWorkerAsync()
                Catch ex As Exception
                    utils.invoke_msg(3, "Worker Error", ex.Message.ToString)
                End Try
            End If
            txtCalmDown.Text = "Feel free to do other work!"
            isScanning = True
        End If

    End Sub

    Private Sub malware_scanner_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        scanType = mainWindow.scanType
        lblSubTitle.Text = scanType & " Scan"
        progressBar1.Style = ProgressBarStyle.Continuous
        isScanning = False
    End Sub

    ' Method: To check is cancellation is pending
    Private Sub check_bgWorkerCancelled()
        ' check if cancellation is pending
        If bgWorker_Scanner.CancellationPending = True Then
            ' background worker cancel asynchronous operating
            If bgWorker_Scanner.IsBusy Then
                Try 'try to
                    ' cancel the threads
                    bgWorker_Scanner.CancelAsync()
                    ' dispose the background worker
                    bgWorker_Scanner.Dispose()
                Catch ex As Exception 'if exception
                    ' invoke error
                    utils.invoke_msg(3, "Worker Error", ex.Message.ToString)
                    Me.Close() 'close form
                End Try
            End If
            isScanning = False 'set scanning to false
            Try
                ' invoke to bypass illegal cross threading UI update
                BeginInvoke(CType(Sub()
                                      progressBar1.Value = 0
                                      txtStatus.Text = "Cancelled"
                                      txtCalmDown.Text = ""
                                      btnToggleScan.Image = Image.FromFile(Application.StartupPath & "/res/malware_scanner/rocket.png")
                                  End Sub, MethodInvoker))
            Catch ex As Exception : End Try
        Else
            Exit Sub
        End If
    End Sub

    Private Sub bgWorker_Scanner_DoWork(sender As Object, e As System.ComponentModel.DoWorkEventArgs) Handles bgWorker_Scanner.DoWork
        ' storage declares
        Dim temp_hash_values As New List(Of String)() ' store malware hash per malware hash file
        Dim temp_file_paths As New List(Of String)() ' store filepaths temporarily
        Dim hashFile_lineParts As String() ' store parts of packed/unpacked hash
        Dim se_queryfile_hashes As New List(Of String)() ' store file hashes of search index query

        ' file operating declares
        Dim file_bytes() As Byte
        Dim file_bytes_size As Integer
        Dim lineBytes() As Byte
        Dim lineBytes_size As Integer
        Dim totalRead_size As Integer

        ' common declared
        Dim reader As StreamReader
        Dim line As String = Nothing

        ' if quickscan, then get hash list
        If scanType = "Quick" Then
            reader = My.Computer.FileSystem.OpenTextFileReader(Application.StartupPath & "/data/win_searchIndex_results.list")
            ' get file bytes
            file_bytes = File.ReadAllBytes(Application.StartupPath & "/data/win_searchIndex_results.list")
            ' get size of file bytes in integer
            file_bytes_size = file_bytes.Length
            Do
                line = reader.ReadLine
                If Not String.IsNullOrEmpty(line) Then
                    ' get line bytes
                    lineBytes = System.Text.Encoding.ASCII.GetBytes(line)
                    ' get line bytes size in integer
                    lineBytes_size = lineBytes.Length
                    ' add line bytes size to total size read
                    totalRead_size += lineBytes_size
                    Try
                        temp_file_paths.Add(line)
                    Catch ex As Exception
                        utils.invoke_msg(3, "Worker Error", ex.Message.ToString)
                    End Try
                End If
                bgWorker_Scanner.ReportProgress(CInt(totalRead_size * 100 / file_bytes_size))
                check_bgWorkerCancelled()
            Loop Until line Is Nothing
            'close reader
            reader.Close()
            'report progress 100%
            bgWorker_Scanner.ReportProgress(0)

            Dim md5hashString As String
            Dim filenumbers As Integer = temp_file_paths.Count
            Dim tempcounter As Integer = 0
            For Each filepath In temp_file_paths
                Try
                    md5hashString = utils._MD5_(filepath)
                    Dim tempstring As String = filepath & " |+| " & md5hashString
                    se_queryfile_hashes.Add(tempstring)
                Catch ex As Exception
                    utils.invoke_msg(3, "Worker Error", ex.Message.ToString)
                End Try
                tempcounter += 1
                bgWorker_Scanner.ReportProgress(tempcounter * 100 / filenumbers)
            Next
            bgWorker_Scanner.ReportProgress(100)
        ElseIf scanType = "Deep" Then

            ' -- Deep Scanner Logic --
            '
            ' Derp Deep Scan = Perform scan for 8K+ extension types (slow but faster than Burp Deep)
            ' Burp Deep Scan = Perform complete system scan (slowest scan)
            '
            ' Default mode = Derp Deep

            Dim temp_counter As Integer = 0

            ' read settings
            reader = New StreamReader(Application.StartupPath & "/data/scanner_settings/DeepScan.conf")
            line = Nothing
            Dim deepType As String = "" ' derp or burp
            Do
                line = reader.ReadLine
                If Not String.IsNullOrEmpty(line) Then
                    Dim tempArray() As String = Split(line, ":")
                    If tempArray(1) IsNot Nothing Or tempArray(1) IsNot "" Then
                        deepType = tempArray(1)
                    End If
                End If
            Loop Until line Is Nothing
            reader.Close()
            reader.Dispose()

            If deepType = "derp" Then
                Dim exts As New List(Of String)() ' save extensions for deep scan
                ' get file list for all filetypes
                Dim ext_files() As String = Directory.GetFiles(Application.StartupPath & "/data/file_extensions_cat/")
                temp_counter = 0
                Dim extFilesCount As Integer = ext_files.Count
                For Each ext_file In ext_files
                    ' read extentions
                    reader = New StreamReader(ext_file)
                    line = Nothing
                    Do
                        line = reader.ReadLine
                        If Not String.IsNullOrEmpty(line) Then
                            ' add extentions to list
                            exts.Add(line)
                        End If
                    Loop Until line Is Nothing
                    reader.Close() : reader.Dispose()
                    temp_counter += 1
                    bgWorker_Scanner.ReportProgress(temp_counter * 100 / extFilesCount)
                    check_bgWorkerCancelled()
                Next
                temp_counter = 0
                Dim extCount As Integer = exts.Count
                ' display status
                Try
                    BeginInvoke(CType(Sub()
                                          txtCalmDown.Text = "Gathering files for " & extCount.ToString & " extensions..."
                                      End Sub, MethodInvoker))
                Catch ex As Exception : End Try

                ' query search indexer
                Dim queryResults As New List(Of String)() ' save query results
                Dim connection As New OleDbConnection("Provider=Search.CollatorDSO;Extended Properties=""Application=Windows""")
                Dim queryFilesCount As Integer = 0
                For Each ext In exts
                    If Not String.IsNullOrEmpty(ext) Then
                        Dim query As String = "SELECT System.ItemUrl FROM SystemIndex WHERE System.ItemName Like '%" + ext + "'"
                        connection.Open()
                        Dim command As New OleDbCommand(query, connection)
                        Using result = command.ExecuteReader() ' execurity command and store in result variable
                            Dim temp_query As String = "" ' for storing temp query
                            While result.Read() ' read result
                                temp_query = result(0).ToString() ' convert result to string
                                'temp_query = temp_query.Remove(0, 5) ' remove "file:" from filepath
                                If temp_query.EndsWith(ext) Then
                                    queryResults.Add(temp_query) ' add filepaths to list
                                End If
                            End While
                        End Using
                        connection.Close() ' close connection
                    End If
                    temp_counter += 1
                    bgWorker_Scanner.ReportProgress(temp_counter * 100 / extCount)
                    check_bgWorkerCancelled()
                Next
                temp_counter = 0
                queryFilesCount = queryResults.Count

                ' display status
                Try
                    BeginInvoke(CType(Sub()
                                          txtCalmDown.Text = "Saving " & queryFilesCount.ToString & " file paths..."
                                      End Sub, MethodInvoker))
                Catch ex As Exception : End Try

                ' save query results
                Dim filepath As String = Application.StartupPath & "/data/win_searchIndex_results.list"
                File.WriteAllLines(filepath, queryResults) ' save filepath list to file
            ElseIf deepType = "burp" Then
                ' complete system scan mode :( long coding..
            End If
        End If

        ' get all hash files from the folder
        Dim malware_hash_files() As String = IO.Directory.GetFiles(Application.StartupPath & "/data/malware_hashes/")
        ' for each hash file
        Dim malware_hash_counter As Integer
        Dim lenMalwarehashfiles As Integer = malware_hash_files.Count
        For Each malware_hash_file In malware_hash_files
            ' start stream reader for reading file
            reader = My.Computer.FileSystem.OpenTextFileReader(malware_hash_file)
            ' loop each line
            Do
                ' perform line read
                line = reader.ReadLine
                ' if line is not null of empty
                If Not String.IsNullOrEmpty(line) Then
                    ' split the line by delimeter -> seperate hashes
                    hashFile_lineParts = line.Split(",")
                    ' add each part of line to temp hash list
                    For Each hashFile_linePart In hashFile_lineParts
                        temp_hash_values.Add(hashFile_linePart)
                    Next
                End If
                ' update progressbar
                bgWorker_Scanner.ReportProgress(malware_hash_counter * 100 / lenMalwarehashfiles)
                ' check is operating cancelled
                check_bgWorkerCancelled()
            Loop Until line Is Nothing
            ' close file reader
            reader.Close()
            ' make temporary line empty
            line = Nothing
            bgWorker_Scanner.ReportProgress(0)

            ' compare hashes
            Dim tempcounter As Integer = 0
            Dim lenFilehashes As Integer = se_queryfile_hashes.Count
            Dim matched_hashes As New List(Of String)
            Dim matched_files As New List(Of String)

            For Each filepathhash In se_queryfile_hashes
                Dim tempArray() As String = Split(filepathhash, " |+| ")
                For Each malwarehash In temp_hash_values
                    If tempArray(1) = malwarehash Then
                        matched_files.Add(tempArray(0))
                        matched_hashes.Add(tempArray(1))
                        malwareDetected = True
                    End If
                    check_bgWorkerCancelled()
                Next
                tempcounter += 1
                bgWorker_Scanner.ReportProgress(tempcounter * 100 / lenFilehashes)
                check_bgWorkerCancelled()
            Next

            bgWorker_Scanner.ReportProgress(0)

            ' write matches hashes to file
            Dim writer As New IO.StreamWriter(Application.StartupPath & "/data/detected.list")
            Dim lenDetections As Integer = matched_hashes.Count
            For x As Integer = 0 To lenDetections - 1
                Dim tempString As String = matched_files(x) & " |+| " & matched_hashes(x)
                writer.WriteLine(tempString)
            Next
            writer.Close()
            writer.Dispose()

            bgWorker_Scanner.ReportProgress(100)
            malware_hash_counter += 1
        Next

        ' clean temporary storage after each file operation
        temp_hash_values.Clear() : Erase hashFile_lineParts : Erase file_bytes : file_bytes_size = 0 : line = Nothing : Erase lineBytes : lineBytes_size = Nothing

        ' garbage collection
        GC.Collect()
    End Sub

    Private Sub bgWorker_Scanner_ProgressChanged(sender As Object, e As System.ComponentModel.ProgressChangedEventArgs) Handles bgWorker_Scanner.ProgressChanged
        Try
            progressBar1.Value = e.ProgressPercentage
        Catch ex As Exception
            utils.invoke_msg(3, "Worker Error", ex.Message.ToString)
        End Try
        txtStatus.Text = e.ProgressPercentage.ToString() + "% Done"
    End Sub

    Private Sub bgWorker_Scanner_RunWorkerCompleted(sender As Object, e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bgWorker_Scanner.RunWorkerCompleted
        isScanning = False
        progressBar1.Value = 100
        txtCalmDown.Text = ""
        btnToggleScan.Image = Image.FromFile(Application.StartupPath & "/res/malware_scanner/rocket.png")
        If e.Cancelled = True Then
            ' if cancelled
            txtStatus.Text = "Cancelled"
        ElseIf e.Error IsNot Nothing Then
            ' if error
            MsgBox(e.Error.Message.ToString)
        Else
            ' if normal completed, show detections window
            If malwareDetected = True Then
                malware_informer.Show()
                Me.Close()
            Else
                MsgBox("You Seem Safe :)")
            End If
        End If
        GC.Collect()
    End Sub
End Class