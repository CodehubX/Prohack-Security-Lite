Imports System.IO

Public Class malware_scanner

    Private isScanning As Boolean
    Private scanType As String

    Sub New()
        InitializeComponent()
        Me.DoubleBuffered = True
    End Sub

    Private Sub btnExit_MouseEnter(sender As Object, e As EventArgs) Handles btnExit.MouseEnter
        Try
            btnExit.BackgroundImage = Image.FromFile("res/common_controls/shutdown_hover.png")
        Catch ex As Exception
            MsgBox(ex.ToString)
        End Try
    End Sub

    Private Sub btnExit_MouseLeave(sender As Object, e As EventArgs) Handles btnExit.MouseLeave
        Try
            btnExit.BackgroundImage = Image.FromFile("res/common_controls/shutdown.png")
        Catch ex As Exception
            MsgBox(ex.ToString)
        End Try
    End Sub

    Private Sub btnExit_Click(sender As Object, e As EventArgs) Handles btnExit.Click
        Me.Close()
        mainWindow.Show()
    End Sub

    Private Sub btnToggleScan_MouseEnter(sender As Object, e As EventArgs) Handles btnToggleScan.MouseEnter
        If isScanning = False Then
            btnToggleScan.Image = Image.FromFile("res/malware_scanner/rocket_hover.png")
        End If
    End Sub

    Private Sub btnToggleScan_MouseLeave(sender As Object, e As EventArgs) Handles btnToggleScan.MouseLeave
        If isScanning = False Then
            btnToggleScan.Image = Image.FromFile("res/malware_scanner/rocket.png")
        End If
    End Sub

    Private Sub btnToggleScan_Click(sender As Object, e As EventArgs) Handles btnToggleScan.Click
        If isScanning = True Then
            ' if scanning, stop scanning
            txtStatus.Text = "Status: Idle..."
            btnToggleScan.Image = Image.FromFile("res/malware_scanner/rocket.png")
            If bgWorker_Scanner.IsBusy Then
                Try
                    bgWorker_Scanner.CancelAsync()
                Catch ex As Exception
                    MsgBox(ex.ToString)
                End Try
            End If
            isScanning = False
        Else
            ' if not scanning, start scanning
            txtStatus.Text = "Status: Scanning..."
            btnToggleScan.Image = Image.FromFile("res/malware_scanner/loading_dark.gif")
            If Not bgWorker_Scanner.IsBusy Then
                Try
                    bgWorker_Scanner.RunWorkerAsync()
                Catch ex As Exception : End Try
            End If
            txtCalmDown.Text = "Feel free to do other work!"
            isScanning = True
        End If

    End Sub

    Private Sub malware_scanner_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        scanType = mainWindow.scanType
        lblSubTitle.Text = scanType & " Scan"
        progressBar1.Style = ProgressBarStyle.Continuous
        isScanning = False
    End Sub

    ' Method: To check is cancellation is pending
    Private Sub check_bgWorkerCancelled()
        ' check if cancellation is pending
        If bgWorker_Scanner.CancellationPending = True Then
            ' background worker cancel asynchronoous operating
            If bgWorker_Scanner.IsBusy Then
                Try
                    bgWorker_Scanner.CancelAsync()
                Catch ex As Exception : End Try
            End If
            isScanning = False
            Try
                ' invoke to bypass illegal cross threading UI update
                BeginInvoke(CType(Sub()
                                      progressBar1.Value = 0
                                      txtStatus.Text = "Cancelled"
                                      txtCalmDown.Text = ""
                                      btnToggleScan.Image = Image.FromFile(Application.StartupPath & "/res/malware_scanner/rocket.png")
                                  End Sub, MethodInvoker))
            Catch ex As Exception : End Try
        Else
            Exit Sub
        End If
    End Sub

    Private Sub bgWorker_Scanner_DoWork(sender As Object, e As System.ComponentModel.DoWorkEventArgs) Handles bgWorker_Scanner.DoWork
        ' storage declares
        Dim temp_hash_values As New List(Of String)() ' store malware hash per malware hash file
        Dim hashFile_lineParts As String() ' store parts of packed/unpacked hash
        Dim se_queryfile_hashes As New List(Of String)() ' store file hashes of search index query

        ' file operating declares
        Dim file_bytes() As Byte
        Dim file_bytes_size As Integer
        Dim lineInFile As String
        Dim lineBytes() As Byte
        Dim lineBytes_size As Integer
        Dim totalRead_size As Integer

        ' declare file reader
        Dim reader As StreamReader

        ' if quickscan, then get hash list
        If scanType = "Quick" Then
            Dim md5hash As String
            reader = My.Computer.FileSystem.OpenTextFileReader(Application.StartupPath & "/data/win_searchIndex_results.list")
            ' get file bytes
            file_bytes = File.ReadAllBytes(Application.StartupPath & "/data/win_searchIndex_results.list")
            ' get size of file bytes in integer
            file_bytes_size = file_bytes.Length
            Do
                lineInFile = reader.ReadLine
                If Not String.IsNullOrEmpty(lineInFile) Then
                    ' get line bytes
                    lineBytes = System.Text.Encoding.ASCII.GetBytes(lineInFile)
                    ' get line bytes size in integer
                    lineBytes_size = lineBytes.Length
                    ' add line bytes size to total size read
                    totalRead_size += lineBytes_size
                    Try
                        md5hash = Hasher.Getmd5(lineInFile)
                        se_queryfile_hashes.Add(md5hash.ToString)
                    Catch ex As Exception : End Try
                End If
                bgWorker_Scanner.ReportProgress(CInt(totalRead_size * 100 / file_bytes_size))
                check_bgWorkerCancelled()
            Loop Until lineInFile Is Nothing
            ' report progress of all done
            ' it's stopping at 98% for unknown reasons
            bgWorker_Scanner.ReportProgress(100)

        End If

        '' get all hash files from the folder
        'Dim malware_hash_files() As String = IO.Directory.GetFiles(Application.StartupPath & "/data/malware_hashes/")
        '' for each hash file
        'For Each malware_hash_file In malware_hash_files
        '    ' get file bytes
        '    file_bytes = File.ReadAllBytes(malware_hash_file)
        '    ' get size of file bytes in integer
        '    file_bytes_size = file_bytes.Length
        '    ' start stream reader for reading file
        '    reader = My.Computer.FileSystem.OpenTextFileReader(malware_hash_file)
        '    ' loop each line
        '    Do
        '        ' perform line read
        '        lineInFile = reader.ReadLine
        '        ' if line is not null of empty
        '        If Not String.IsNullOrEmpty(lineInFile) Then
        '            ' get line bytes
        '            lineBytes = System.Text.Encoding.ASCII.GetBytes(lineInFile)
        '            ' get line bytes size in integer
        '            lineBytes_size = lineBytes.Length
        '            ' add line bytes size to total size read
        '            totalRead_size += lineBytes_size
        '            ' split the line by delimeter -> seperate hashes
        '            hashFile_lineParts = lineInFile.Split(",")
        '            ' add each part of line to temp hash list
        '            For Each hashFile_linePart In hashFile_lineParts
        '                temp_hash_values.Add(hashFile_linePart)
        '            Next
        '        End If
        '        ' update progressbar
        '        bgWorker_Scanner.ReportProgress(CInt(totalRead_size * 100 / file_bytes_size))
        '        ' check is operating cancelled
        '        check_bgWorkerCancelled()
        '    Loop Until lineInFile Is Nothing
        '    ' close file reader
        '    reader.Close()
        '    ' make temporary line empty
        '    lineInFile = Nothing

        '    ' compare hashes

        'Next

        ' clean temporary storage after each file operation
        temp_hash_values.Clear() : Erase hashFile_lineParts : Erase file_bytes : file_bytes_size = 0 : lineInFile = Nothing : Erase lineBytes : lineBytes_size = Nothing

        ' garbage collection
        GC.Collect()
    End Sub

    Private Sub bgWorker_Scanner_ProgressChanged(sender As Object, e As System.ComponentModel.ProgressChangedEventArgs) Handles bgWorker_Scanner.ProgressChanged
        progressBar1.Value = e.ProgressPercentage
        txtStatus.Text = e.ProgressPercentage.ToString() + "% Done"
    End Sub

    Private Sub bgWorker_Scanner_RunWorkerCompleted(sender As Object, e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bgWorker_Scanner.RunWorkerCompleted
        isScanning = False
        progressBar1.Value = 100
        txtCalmDown.Text = ""
        btnToggleScan.Image = Image.FromFile(Application.StartupPath & "/res/malware_scanner/rocket.png")
        If e.Cancelled = True Then
            txtStatus.Text = "Cancelled"
        ElseIf e.Error IsNot Nothing Then
            MsgBox(e.Error.Message.ToString)
        End If
        GC.Collect()
    End Sub
End Class