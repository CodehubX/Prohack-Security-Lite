Imports System.Data.OleDb
Imports System.IO

Public Class malware_scanner

    Private isScanning As Boolean
    Private scanType As String
    Private malwareDetected As Boolean

    Sub New()
        InitializeComponent()
        Me.DoubleBuffered = True
    End Sub

    Private Sub btnExit_MouseEnter(sender As Object, e As EventArgs) Handles btnExit.MouseEnter
        Try
            btnExit.BackgroundImage = Image.FromFile(Application.StartupPath & "/res/common_controls/shutdown_hover.png")
        Catch ex As Exception
            MsgBox(ex.ToString)
        End Try
    End Sub

    Private Sub btnExit_MouseLeave(sender As Object, e As EventArgs) Handles btnExit.MouseLeave
        Try
            btnExit.BackgroundImage = Image.FromFile(Application.StartupPath & "/res/common_controls/shutdown.png")
        Catch ex As Exception
            utils.invoke_msg(2, "Icon Error", ex.Message.ToString)
        End Try
    End Sub

    Private Sub btnExit_Click(sender As Object, e As EventArgs) Handles btnExit.Click
        close_me(True)
    End Sub

    Private Sub btnToggleScan_MouseEnter(sender As Object, e As EventArgs) Handles btnToggleScan.MouseEnter
        If isScanning = False Then
            btnToggleScan.Image = Image.FromFile(Application.StartupPath & "/res/malware_scanner/rocket_hover.png")
        End If
    End Sub

    Private Sub btnToggleScan_MouseLeave(sender As Object, e As EventArgs) Handles btnToggleScan.MouseLeave
        If isScanning = False Then
            btnToggleScan.Image = Image.FromFile(Application.StartupPath & "/res/malware_scanner/rocket.png")
        End If
    End Sub

    Private Sub btnToggleScan_Click(sender As Object, e As EventArgs) Handles btnToggleScan.Click
        If isScanning = True Then
            ' if scanning, stop scanning
            txtStatus.Text = "Status: Idle..."
            btnToggleScan.Image = Image.FromFile(Application.StartupPath & "/res/malware_scanner/rocket.png")
            If bgWorker_Scanner.IsBusy Then
                Try
                    bgWorker_Scanner.CancelAsync()
                Catch ex As Exception
                    utils.invoke_msg(3, "Worker Error", ex.Message.ToString)
                End Try
            End If
            isScanning = False
        Else
            ' if not scanning, start scanning
            txtStatus.Text = "Status: Scanning..."
            btnToggleScan.Image = Image.FromFile(Application.StartupPath & "/res/malware_scanner/loading_dark.gif")
            If Not bgWorker_Scanner.IsBusy Then
                Try
                    bgWorker_Scanner.RunWorkerAsync()
                Catch ex As Exception
                    utils.invoke_msg(3, "Worker Error", ex.Message.ToString)
                End Try
            End If
            txtCalmDown.Text = "Feel free to do other work!"
            isScanning = True
        End If

    End Sub

    Private Sub malware_scanner_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        scanType = mainWindow.scanType
        lblSubTitle.Text = scanType & " Scan"
        progressBar1.Style = ProgressBarStyle.Continuous
        isScanning = False
    End Sub

    ' Method: To check is cancellation is pending
    Private Sub check_bgWorkerCancelled(e As System.ComponentModel.DoWorkEventArgs)
        ' check if cancellation is pending
        If bgWorker_Scanner.CancellationPending = True Then
            ' background worker cancel asynchronous operating
            e.Cancel = True
            If bgWorker_Scanner.IsBusy Then
                Try 'try to
                    ' cancel the background worker
                    e.Cancel = True
                Catch ex As Exception 'if exception
                    ' invoke error
                    utils.invoke_msg(3, "Worker Error", ex.Message.ToString)
                    Me.Close() 'close form
                End Try
            End If
            isScanning = False 'set scanning to false
            Try
                ' invoke to bypass illegal cross threading UI update
                BeginInvoke(CType(Sub()
                                      progressBar1.Value = 0
                                      txtStatus.Text = "Cancelled"
                                      txtCalmDown.Text = ""
                                      btnToggleScan.Image = Image.FromFile(Application.StartupPath & "/res/malware_scanner/rocket.png")
                                  End Sub, MethodInvoker))
            Catch ex As Exception : End Try
        Else
            Exit Sub
        End If
    End Sub

    Private Sub bgWorker_Scanner_DoWork(sender As Object, e As System.ComponentModel.DoWorkEventArgs) Handles bgWorker_Scanner.DoWork
        ' storage declares
        Dim temp_hash_values As New List(Of String)() ' store malware hashes from db
        Dim temp_file_paths As New List(Of String)() ' store filepaths temporarily
        Dim hashFile_lineParts As String() ' store parts of packed/unpacked hash
        Dim queryfile_hashes As New List(Of String)() ' store generated file hashes of search index query
        ' file operating declares
        Dim file_bytes() As Byte
        Dim file_bytes_size As Integer
        Dim lineBytes() As Byte
        Dim lineBytes_size As Integer
        Dim totalRead_size As Integer

        ' common declared
        Dim reader As StreamReader
        Dim line As String = Nothing

        ' if quickscan, then get hash list
        If scanType = "Quick" Then
            reader = My.Computer.FileSystem.OpenTextFileReader(utils.WSIR_file)
            ' get file bytes
            file_bytes = File.ReadAllBytes(utils.WSIR_file)
            ' get size of file bytes in integer
            file_bytes_size = file_bytes.Length
            Do
                line = reader.ReadLine
                If Not String.IsNullOrEmpty(line) Then
                    ' get line bytes
                    lineBytes = System.Text.Encoding.ASCII.GetBytes(line)
                    ' get line bytes size in integer
                    lineBytes_size = lineBytes.Length
                    ' add line bytes size to total size read
                    totalRead_size += lineBytes_size
                    Try
                        temp_file_paths.Add(line)
                    Catch ex As Exception : End Try
                End If
                bgWorker_Scanner.ReportProgress(CInt(totalRead_size * 100 / file_bytes_size))
            Loop Until line Is Nothing
            'close reader
            reader.Close() : reader.Dispose()
            'report progress 100%
            bgWorker_Scanner.ReportProgress(0)

            Dim md5hashString As String
            Dim filenumbers As Integer = temp_file_paths.Count
            Dim tempcounter As Integer = 0
            For Each filepath In temp_file_paths
                Try
                    md5hashString = utils._MD5_(filepath)
                    Dim tempstring As String = filepath & " |+| " & md5hashString
                    queryfile_hashes.Add(tempstring)
                Catch ex As Exception : End Try
                tempcounter += 1
                bgWorker_Scanner.ReportProgress(tempcounter * 100 / filenumbers)
                check_bgWorkerCancelled(e)
            Next
            bgWorker_Scanner.ReportProgress(100)
        ElseIf scanType = "Deep" Then
            ' perform deep scan
        ElseIf scanType = "Custom" Then
            ' perform custom scan
        End If

        ' get all hash files from the folder
        Dim malware_hash_files() As String = IO.Directory.GetFiles(Application.StartupPath & "/data/malware_hashes/")
        ' for each hash file
        Dim malware_hash_counter As Integer
        Dim lenMalwarehashfiles As Integer = malware_hash_files.Count
        For Each malware_hash_file In malware_hash_files
            ' start stream reader for reading file
            reader = My.Computer.FileSystem.OpenTextFileReader(malware_hash_file)
            ' loop each line
            Do
                ' perform line read
                line = reader.ReadLine
                ' if line is not null of empty
                If Not String.IsNullOrEmpty(line) Then
                    ' split the line by delimeter -> seperate hashes
                    hashFile_lineParts = line.Split(",")
                    ' add each part of line to temp hash list
                    For Each hashFile_linePart In hashFile_lineParts
                        temp_hash_values.Add(hashFile_linePart)
                    Next
                End If
                ' update progressbar
                bgWorker_Scanner.ReportProgress(malware_hash_counter * 100 / lenMalwarehashfiles)
            Loop Until line Is Nothing
            ' close file reader
            reader.Close()
            ' make temporary line empty
            line = Nothing
            bgWorker_Scanner.ReportProgress(0)

            ' compare hashes
            Dim tempcounter As Integer = 0
            Dim lenFilehashes As Integer = queryfile_hashes.Count
            Dim matched_hashes As New List(Of String)
            Dim matched_files As New List(Of String)

            For Each filepathhash In queryfile_hashes
                Dim tempArray() As String = Split(filepathhash, " |+| ")
                For Each malwarehash In temp_hash_values
                    If tempArray(1) = malwarehash Then
                        matched_files.Add(tempArray(0))
                        matched_hashes.Add(tempArray(1))
                        malwareDetected = True
                    End If
                Next
                tempcounter += 1
                bgWorker_Scanner.ReportProgress(tempcounter * 100 / lenFilehashes)
            Next
            bgWorker_Scanner.ReportProgress(0)

            ' write matches hashes to file
            Dim writer As New IO.StreamWriter(utils.dectected_malware_file)
            Dim lenDetections As Integer = matched_hashes.Count
            For x As Integer = 0 To lenDetections - 1
                Dim tempString As String = matched_files(x) & " |+| " & matched_hashes(x)
                writer.WriteLine(tempString)
            Next
            writer.Close()
            writer.Dispose()
            bgWorker_Scanner.ReportProgress(100)
            malware_hash_counter += 1
        Next
        check_bgWorkerCancelled(e)

        ' clean temporary storage after each file operation
        temp_hash_values.Clear() : Erase hashFile_lineParts : Erase file_bytes : file_bytes_size = 0 : line = Nothing : Erase lineBytes : lineBytes_size = Nothing

        ' garbage collection
        GC.Collect()
    End Sub

    Private Sub bgWorker_Scanner_ProgressChanged(sender As Object, e As System.ComponentModel.ProgressChangedEventArgs) Handles bgWorker_Scanner.ProgressChanged
        Try
            progressBar1.Value = e.ProgressPercentage
        Catch ex As Exception
            utils.invoke_msg(3, "Worker Error", ex.Message.ToString)
        End Try
        txtStatus.Text = e.ProgressPercentage.ToString() + "% Done"
    End Sub

    Private Sub malware_scanner_MouseDown(sender As Object, e As MouseEventArgs) Handles MyBase.MouseDown
        utils.Form_MouseDown(Me, e)
    End Sub

    Private Sub malware_scanner_MouseMove(sender As Object, e As MouseEventArgs) Handles MyBase.MouseMove
        utils.Form_MouseMove(Me, e)
    End Sub

    Private Sub malware_scanner_MouseUp(sender As Object, e As MouseEventArgs) Handles MyBase.MouseUp
        utils.Form_MouseUp(Me, e)
    End Sub

    Private Sub btnMinimize_MouseEnter(sender As Object, e As EventArgs) Handles btnMinimize.MouseEnter
        Try
            btnMinimize.BackgroundImage = Image.FromFile(Application.StartupPath & "/res/common_controls/minimize_hover.png")
        Catch ex As Exception
            utils.invoke_msg(2, "Icon Error", ex.Message.ToString)
        End Try
    End Sub

    Private Sub btnMinimize_MouseLeave(sender As Object, e As EventArgs) Handles btnMinimize.MouseLeave
        Try
            btnMinimize.BackgroundImage = Image.FromFile(Application.StartupPath & "/res/common_controls/minimize.png")
        Catch ex As Exception
            utils.invoke_msg(2, "Icon Error", ex.Message.ToString)
        End Try
    End Sub

    Private Sub close_me(showMain As Boolean)
        If mainWindow.fadeEffect_Status = "on" Then
            utils.form_fadeOut(Me)
        End If
        If showMain = True Then
            mainWindow.Show()
        End If
        Me.Close()
    End Sub

    Private Sub btnMinimize_Click(sender As Object, e As EventArgs) Handles btnMinimize.Click
        If mainWindow.fadeEffect_Status = "on" Then
            utils.form_fadeOut(Me)
            check_focused.Start()
        End If
        Me.WindowState = FormWindowState.Minimized
    End Sub

    Private Sub check_focused_Tick(sender As Object, e As EventArgs) Handles check_focused.Tick
        If Me.WindowState = FormWindowState.Normal Then
            utils.form_fadeIn(Me)
            Me.Opacity = 1
            check_focused.Stop()
        End If
    End Sub

    Private Sub bgWorker_Scanner_RunWorkerCompleted(sender As Object, e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bgWorker_Scanner.RunWorkerCompleted
        isScanning = False
        progressBar1.Value = 100
        txtCalmDown.Text = ""
        btnToggleScan.Image = Image.FromFile(Application.StartupPath & "/res/malware_scanner/rocket.png")
        If e.Cancelled = True Then
            ' if cancelled
            txtStatus.Text = "Cancelled"
        ElseIf e.Error IsNot Nothing Then
            ' if error
            utils.invoke_msg(2, "Worker Error", e.Error.ToString)
        Else
            ' if normal completed, show detections window
            If malwareDetected = True Then
                malware_informer.Show()
                close_me(False)
            Else
                utils.invoke_msg(1, "You're Safe!", "You seem to be safe :)")
            End If
        End If
        GC.Collect()
    End Sub
End Class